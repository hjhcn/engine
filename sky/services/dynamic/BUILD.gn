# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

source_set("embedder") {
  sources = [
    "dynamic_service.c",
    "dynamic_service.h",
    "dynamic_service_definition.cc",
    "dynamic_service_definition.h",
    "dynamic_service_embedder.c",
    "dynamic_service_embedder.h",
    "dynamic_service_macros.h",
  ]

  deps = [
    "//mojo/public/c/environment",
    "//mojo/public/c/system",
  ]

  # In order for the embedder to access the routine that prepares the
  # the thunk for dylib, It needs access to system_thunks.h. This is included
  # in a target that includes mojo symbols already present on the embedder.
  # This works around header checks just for these files.
  check_includes = false

  defines = [
    "DYNAMIC_SERVICE_EMBEDDER",
  ]
}

static_library("sdk_lib_single_arch") {
  output_name = "FlutterServices"
  complete_static_lib = true

  sources = [
    "dynamic_service.c",
    "dynamic_service.h",
    "dynamic_service_dylib.cc",
    "dynamic_service_dylib.h",
    "dynamic_service_macros.h",
  ]

  deps = [
    "//mojo/public/c/system",
    "//mojo/public/cpp/bindings",
    "//mojo/public/cpp/environment:standalone",
    "//mojo/public/platform/native:system",
  ]
}


group("sdk_lib") {
  action("generate_fat_binary") {
    stamp_file = "$root_out_dir/dynamic_service_dylib_lipo"
    script = "//sky/tools/lipo.py"

    device_target = ":sdk_lib_single_arch(//build/toolchain/mac:ios_clang_arm)"
    sim_target = ":sdk_lib_single_arch(//build/toolchain/mac:clang_x64)"

    device_binary = "$root_build_dir/obj/sky/services/dynamic/libFlutterServices.a"
    sim_binary    = "$root_build_dir/clang_x64/obj/sky/services/dynamic/libFlutterServices.a"
    fat_binary = "$root_out_dir/FlutterServicesIOS.a"

    inputs = [
      device_binary,
      sim_binary,
    ]

    outputs = [
      stamp_file,
      fat_binary,
    ]

    args = [
      "--stamp",
      rebase_path(stamp_file),
      "--path",
      rebase_path(device_binary),
      "--path",
      rebase_path(sim_binary),
      "--output",
      rebase_path(fat_binary),
    ]

    deps = [
      "$device_target",
      "$sim_target",
    ]
  }

  deps = []

  if (is_ios) {
    deps += [
      ":generate_fat_binary",
    ]
  }
}
