// Copyright 2014 The Dartium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by {{code_generator_dart}}. DO NOT MODIFY!

#ifndef {{dart_class}}_h
#define {{dart_class}}_h

{% filter conditional(conditional_string) %}
{% for filename in header_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

class {{dart_class}} : public {{cpp_class}}, public ActiveDOMCallback {
public:
    typedef {{dart_class}} NativeType;

    static PassOwnPtr<NativeType> create(Dart_Handle object, Dart_Handle& exception)
    {
        return adoptPtr(new {{dart_class}}(object, exception, DartUtilities::scriptExecutionContext()));
    }

    static PassOwnPtr<NativeType> createWithNullCheck(Dart_Handle object, Dart_Handle& exception)
    {
        if (Dart_IsNull(object))
            return PassOwnPtr<NativeType>();
        return create(object, exception);
    }

    static PassOwnPtr<NativeType> create(Dart_NativeArguments args, int idx, Dart_Handle& exception)
    {
        Dart_Handle object = Dart_GetNativeArgument(args, idx);
        return create(object, exception);
    }

    static PassOwnPtr<NativeType> createWithNullCheck(Dart_NativeArguments args, int idx, Dart_Handle& exception)
    {
        Dart_Handle object = Dart_GetNativeArgument(args, idx);
        if (Dart_IsNull(object))
            return PassOwnPtr<NativeType>();
        return create(object, exception);
    }

{% for method in methods %}
    virtual {{method.cpp_type}} {{method.name}}({{method.argument_declarations | join(', ')}}) OVERRIDE;
{% endfor %}
private:
    {{dart_class}}(Dart_Handle object, Dart_Handle& exception, ExecutionContext* context)
        : ActiveDOMCallback(context)
        , m_callback(object, exception)
    {
    }

    DartCallback m_callback;
};

}
{% endfilter %}
#endif // {{dart_class}}_h
